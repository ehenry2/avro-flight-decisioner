// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ReneKroon/ttlcache/v2 (interfaces: SimpleCache)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSimpleCache is a mock of SimpleCache interface.
type MockSimpleCache struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleCacheMockRecorder
}

// MockSimpleCacheMockRecorder is the mock recorder for MockSimpleCache.
type MockSimpleCacheMockRecorder struct {
	mock *MockSimpleCache
}

// NewMockSimpleCache creates a new mock instance.
func NewMockSimpleCache(ctrl *gomock.Controller) *MockSimpleCache {
	mock := &MockSimpleCache{ctrl: ctrl}
	mock.recorder = &MockSimpleCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleCache) EXPECT() *MockSimpleCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSimpleCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSimpleCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSimpleCache)(nil).Close))
}

// Get mocks base method.
func (m *MockSimpleCache) Get(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSimpleCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSimpleCache)(nil).Get), arg0)
}

// GetWithTTL mocks base method.
func (m *MockSimpleCache) GetWithTTL(arg0 string) (interface{}, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithTTL", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithTTL indicates an expected call of GetWithTTL.
func (mr *MockSimpleCacheMockRecorder) GetWithTTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithTTL", reflect.TypeOf((*MockSimpleCache)(nil).GetWithTTL), arg0)
}

// Purge mocks base method.
func (m *MockSimpleCache) Purge() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge")
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockSimpleCacheMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockSimpleCache)(nil).Purge))
}

// Remove mocks base method.
func (m *MockSimpleCache) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSimpleCacheMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSimpleCache)(nil).Remove), arg0)
}

// Set mocks base method.
func (m *MockSimpleCache) Set(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSimpleCacheMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSimpleCache)(nil).Set), arg0, arg1)
}

// SetTTL mocks base method.
func (m *MockSimpleCache) SetTTL(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTTL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTTL indicates an expected call of SetTTL.
func (mr *MockSimpleCacheMockRecorder) SetTTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTTL", reflect.TypeOf((*MockSimpleCache)(nil).SetTTL), arg0)
}

// SetWithTTL mocks base method.
func (m *MockSimpleCache) SetWithTTL(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithTTL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithTTL indicates an expected call of SetWithTTL.
func (mr *MockSimpleCacheMockRecorder) SetWithTTL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithTTL", reflect.TypeOf((*MockSimpleCache)(nil).SetWithTTL), arg0, arg1, arg2)
}
